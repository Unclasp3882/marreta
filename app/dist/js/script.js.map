{"version":3,"sources":["scripts.js"],"names":["validateForm","urlInput","document","getElementById","submitButton","querySelector","url","value","trim","showError","test","URL","e","readonly","disabled","classList","add","remove","innerHTML","message","form","existingError","errorDiv","createElement","className","appendChild","navigator","window","addEventListener","serviceWorker","register","then","catch"],"mappings":"AAwBA,SAAAA,eACA,IAAAC,EAAAC,SAAAC,eAAA,KAAA,EACAC,EAAAF,SAAAG,cAAA,uBAAA,EACAC,EAAAL,EAAAM,MAAAC,KAAA,EAIA,GAAA,CAAAF,EAEA,OADAG,UAAA,2BAAA,EACA,CAAA,EAKA,GAAA,CAAA,gBAAAC,KAAAJ,CAAA,EAEA,OADAG,UAAA,4CAAA,EACA,CAAA,EAKA,IACA,IAAAE,IAAAL,CAAA,CAIA,CAHA,MAAAM,GAEA,OADAH,UAAA,yBAAA,EACA,CAAA,CACA,CAqBA,OAjBAR,EAAAY,SAAA,CAAA,EACAT,EAAAU,SAAA,CAAA,EAIAV,EAAAW,UAAAC,IAAA,cAAA,sBAAA,EACAZ,EAAAW,UAAAE,OAAA,mBAAA,EAEAhB,EAAAc,UAAAC,IAAA,cAAA,sBAAA,oBAAA,EAIAZ,EAAAc;;;MAKA,CAAA,CACA,CAiBA,SAAAT,UAAAU,GACA,IAAAC,EAAAlB,SAAAC,eAAA,SAAA,EACAkB,EAAAD,EAAAf,cAAA,gBAAA,EAUAiB,GANAD,GACAA,EAAAJ,OAAA,EAKAf,SAAAqB,cAAA,KAAA,GACAD,EAAAE,UAAA,4CACAF,EAAAJ;;UAEAC,EAEAC,EAAAK,YAAAH,CAAA,CACA,CASA,kBAAAI,WACAC,OAAAC,iBAAA,OAAA,KACAF,UAAAG,cAAAC,SAAA,oBAAA,EACAC,KAAA,MAGA,EACAC,MAAA,MAGA,CACA,CAAA","file":"script.js","sourcesContent":["/**\r\n * JavaScript functions for form validation and error handling\r\n * Funções JavaScript para validação de formulário e manipulação de erros\r\n */\r\n\r\n/**\r\n * Validates the form before submission\r\n * \r\n * Checks:\r\n * - If URL is not empty\r\n * - If URL starts with http:// or https://\r\n * - If URL has a valid format\r\n * \r\n * @returns {boolean} True if URL is valid, False otherwise\r\n * \r\n * Valida o formulário antes do envio\r\n * \r\n * Verifica:\r\n * - Se a URL não está vazia\r\n * - Se a URL começa com http:// ou https://\r\n * - Se a URL tem um formato válido\r\n * \r\n * @returns {boolean} True se a URL for válida, False caso contrário\r\n */\r\nfunction validateForm() {\r\n    const urlInput = document.getElementById('url');\r\n    const submitButton = document.querySelector('button[type=\"submit\"]');\r\n    const url = urlInput.value.trim();\r\n    \r\n    // Check if URL is not empty\r\n    // Verifica se a URL não está vazia\r\n    if (!url) {\r\n        showError('Por favor, insira uma URL');\r\n        return false;\r\n    }\r\n\r\n    // Check if URL starts with http:// or https://\r\n    // Verifica se a URL começa com http:// ou https://\r\n    if (!/^https?:\\/\\//i.test(url)) {\r\n        showError('A URL deve começar com http:// ou https://');\r\n        return false;\r\n    }\r\n\r\n    // Try to create a URL object to validate format\r\n    // Tenta criar um objeto URL para validar o formato\r\n    try {\r\n        new URL(url);\r\n    } catch (e) {\r\n        showError('Formato de URL inválido');\r\n        return false;\r\n    }\r\n\r\n    // Disable input and button\r\n    // Desabilita o input e o botão\r\n    urlInput.readonly = true;\r\n    submitButton.disabled = true;\r\n    \r\n    // Add Tailwind disabled classes\r\n    // Adiciona classes de disabled do Tailwind\r\n    submitButton.classList.add('cursor-wait', 'disabled:bg-blue-400');\r\n    submitButton.classList.remove('hover:bg-blue-700');\r\n\r\n    urlInput.classList.add('cursor-wait', 'disabled:bg-gray-50', 'focus:outline-none');\r\n\r\n    // Add loading state to button\r\n    // Adiciona estado de loading ao botão\r\n    submitButton.innerHTML = `\r\n        <img src=\"assets/svg/search.svg\" class=\"w-6 h-6 mr-3\" alt=\"Search\">\r\n        Analisando...\r\n    `;\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Displays an error message below the form\r\n * \r\n * Removes any existing error message before displaying the new one.\r\n * The message is displayed with an error icon and red formatting.\r\n * \r\n * @param {string} message Error message to be displayed\r\n * \r\n * Exibe uma mensagem de erro abaixo do formulário\r\n * \r\n * Remove qualquer mensagem de erro existente antes de exibir a nova.\r\n * A mensagem é exibida com um ícone de erro e formatação em vermelho.\r\n * \r\n * @param {string} message Mensagem de erro a ser exibida\r\n */\r\nfunction showError(message) {\r\n    const form = document.getElementById('urlForm');\r\n    const existingError = form.querySelector('.error-message');\r\n    \r\n    // Remove previous error message if it exists\r\n    // Remove mensagem de erro anterior se existir\r\n    if (existingError) {\r\n        existingError.remove();\r\n    }\r\n\r\n    // Create and add new error message\r\n    // Cria e adiciona nova mensagem de erro\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.className = 'error-message mt-4 text-base text-red-600';\r\n    errorDiv.innerHTML = `\r\n        <img src=\"assets/svgs/error.svg\" class=\"inline-block w-5 h-5 mr-2\" alt=\"Error icon\">\r\n        ${message}`;\r\n    \r\n    form.appendChild(errorDiv);\r\n}\r\n\r\n/**\r\n * Service Worker registration for PWA functionality\r\n * Registers a service worker to enable offline capabilities and PWA features\r\n * \r\n * Registro do Service Worker para funcionalidade PWA\r\n * Registra um service worker para habilitar recursos offline e funcionalidades PWA\r\n */\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n        navigator.serviceWorker.register('/service-worker.js')\r\n            .then(() => {\r\n                // Service Worker registered successfully\r\n                // Service Worker registrado com sucesso\r\n            })\r\n            .catch(() => {\r\n                // Service Worker registration failed\r\n                // Falha no registro do Service Worker\r\n            });\r\n    });\r\n}\r\n"]}